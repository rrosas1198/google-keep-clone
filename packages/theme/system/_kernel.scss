/* stylelint-disable function-no-unknown */
/* stylelint-disable at-rule-no-unknown */
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../modules/string-ext";

@function get-varname($custom-prop) {
    @return map.get($custom-prop, "varname");
}

@function get-fallback($custom-prop) {
    @return map.get($custom-prop, "fallback");
}

@function is-custom-property($value) {
    @return meta.type-of($value) == "map" and map.has-key($value, "varname");
}

@function create-custom-property($varname, $fallback: null) {
    $varname: create-varname($varname);
    @return (varname: $varname, fallback: $fallback);
}

@function create-varname($varname) {
    @if string-ext.has-prefix($varname, "--") {
        @return $varname;
    }
    @return string.unquote("--#{$varname}");
}

@mixin declaration($property, $custom-prop: null) {
    @if $property {
        $value: null;

        @if is-custom-property($property) {
            $custom-prop: $property;
            $property: get-varname($custom-prop);
            $value: get-fallback($custom-prop);

            @if is-custom-property($value) {
                $value: var($property);
            }
        } @else {
            @if not is-custom-property($custom-prop) {
                @error "kernel: invalid custom property: #{$custom-prop}";
            }

            $value: get-fallback($custom-prop);
        }

        #{$property}: #{$value};
    }
}
