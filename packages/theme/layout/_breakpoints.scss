/* stylelint-disable function-no-unknown */
/* stylelint-disable at-rule-no-unknown */
@use "sass:list";
@use "sass:map";
@use "../modules/math-ext";

$breakpoints: (
    compact: (
        measure: 0,
        columns: 4,
        margin: math-ext.to-em(8px),
        max-width: 90%
    ),
    medium: (
        measure: math-ext.to-em(600px),
        columns: 12,
        margin: math-ext.to-em(12px),
        max-width: 85%
    ),
    expanded: (
        measure: math-ext.to-em(840px),
        columns: 12,
        margin: math-ext.to-em(32px),
        max-width: 80%
    )
);

@function get-keys() {
    @return map.keys($breakpoints);
}

@function get-fallback($name, $prop) {
    $name: _validate-name($name);
    $prop: _validate-prop($prop);
    $breakpoint: map.get($breakpoints, $name);
    @return map.get($breakpoint, $prop);
}

@function breakpoint-next($name) {
    $keys: get-keys();
    $name: _validate-name($name);
    $index: list.index($keys, $name);
    @return if($index < list.length($keys), list.nth($keys, $index + 1), null);
}

@function breakpoint-min($name) {
    $name: _validate-name($name);
    $min: get-fallback($name, measure);
    @return if($min != 0, $min, null);
}

@function breakpoint-max($name) {
    $next: breakpoint-next($name);
    @return if($next, breakpoint-min($next) - 0.02, null);
}

@function breakpoint-infix($name) {
    @return if(breakpoint-min($name) == null, "", "-#{$name}");
}

@function _validate-name($name) {
    @if map.has-key($breakpoints, $name) {
        @return $name;
    }
    @error "layout: invalid breakpoint #{$name}";
}

@function _validate-prop($prop) {
    $compact: map.get($breakpoints, compact);
    @if map.has-key($compact, $prop) {
        @return $prop;
    }
    @error "layout: invalid breakpoint property #{$prop}";
}
