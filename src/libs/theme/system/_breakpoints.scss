/* stylelint-disable at-rule-no-unknown */
/* stylelint-disable function-no-unknown */
@use "sass:list";
@use "sass:map";
@use "../modules/math-ext";

$_breakpoints: (
    xs: (
        width: 0,
        margin: 24px,
        max-width: 100%
    ),
    sm: (
        width: 576px,
        margin: null,
        max-width: null
    ),
    md: (
        width: 768px,
        margin: null,
        max-width: null
    ),
    xmd: (
        width: 992px,
        margin: 32px,
        max-width: null
    ),
    lg: (
        width: 1200px,
        margin: null,
        max-width: null
    ),
    xlg: (
        width: 1600px,
        margin: null,
        max-width: 1440px
    ),
    x-xlg: (
        width: 1920px,
        margin: null,
        max-width: 1600px
    )
);

@function get-keys() {
    @return map.keys($_breakpoints);
}

@function get-value($key, $value) {
    $key: _validate-key($key);
    $value: _validate-value($value);
    $breakpoint: map.get($_breakpoints, $key);
    @return map.get($breakpoint, $value);
}

@function get-infix($name) {
    @return if(get-min($name) == null, "", "-#{$name}");
}

@function get-next($name) {
    $name: _validate-key($name);
    $keys: get-keys();
    $index: list.index($keys, $name);
    @return if($index < list.length($keys), list.nth($keys, $index + 1), null);
}

@function get-min($name) {
    $name: _validate-key($name);
    $min: get-value($name, width);
    @return if($min != 0, $min, null);
}

@function get-max($name) {
    $next: get-next($name);
    @return if($next, get-min($next) - 0.02, null);
}

@function _validate-key($property) {
    @if map.has-key($_breakpoints, $property) {
        @return $property;
    }
    @error "breakpoints: invalid property #{$property}";
}

@function _validate-value($property) {
    $compact: map.get($_breakpoints, xs);
    @if map.has-key($compact, $property) {
        @return $property;
    }
    @error "breakpoints: invalid property #{$prop}";
}
